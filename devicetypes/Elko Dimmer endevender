/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */

metadata {
    definition (name: "Elko Dimmer-Endevender", namespace: "nilskaa@gmail.com", author: "Nils-Martin Skaanes and Tor Andr√© Roland") {
        capability "Switch"
        capability "Refresh"
        capability "Switch Level"
        capability "Configuration"
        
        
        //Raw code from elko dimmer-endevender: 01 0104 0104 00 02 0000 0003 03 0003 0006 0008
        fingerprint profileId: "0104", inClusters: "0000, 0003", outClusters: "0003, 0006, 0008"
    }
    
    	// UI tile definitions
	tiles {
		standardTile("button", "device.switch", width: 2, height: 2, canChangeIcon: true) {
			state "off", label: 'Off', action: "switch.on", icon: "st.Kids.kid10", backgroundColor: "#ffffff", nextState: "on"
			state "on", label: 'On', action: "switch.off", icon: "st.Kids.kid10", backgroundColor: "#79b821", nextState: "off"
		}
		standardTile("refresh", "device.switch", inactiveLabel: false, decoration: "flat") {
			state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
		}        
        controlTile("levelSliderControl", "device.level", "slider", height: 1, width: 2, inactiveLabel: false, backgroundColor:"#ffe71e") {
            state "level", action:"switch level.setLevel"
        }
        valueTile("lValue", "device.level", inactiveLabel: true, height:1, width:1, decoration: "flat") {
            state "levelValue", label:'${currentValue}%', unit:"", backgroundColor: "#53a7c0"
        }
        standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "configure", label:'', action:"configuration.configure", icon:"st.secondary.configure"
		}

		main(["button"])
		details(["button", "refresh","levelSliderControl","lValue","configure"])
	}

}

// Parse incoming device messages to generate events
def parse(String description) {
	def descMap = zigbee.parseDescriptionAsMap(description)
    def oldValue = null
    def name = null
    def value = null
    def direction = null
    
    if (descMap.clusterInt == 6 && descMap.commandInt == 2) {
        name = "switch"
        oldValue = device.currentValue("switch")
        value = oldValue == "on" ? "off" : "on"
    } 
    else if (descMap.clusterInt == 8 && descMap.commandInt == 2) {
    	name = "level"
        oldValue = device.currentValue("level")
        direction = descMap.data[0] == "01" ? "down" : "up"
        value = direction == "down" ? oldValue - 10 : oldValue + 10
        
        if (value < 1) value = 1
    	else if( value > 100) value = 100
    }

    // createEvent returns a Map that defines an Event
    def event = createEvent(name: name, value: value)
    log.debug "Event is $event"
    sendEvent(event)
}

def on() {
	sendEvent(name: "switch", value: "on")
    log.info "Dimmer On"
}

def off() {
	sendEvent(name: "switch", value: "off")
    log.info "Dimmer Off"
}

def setLevel(val){
    log.info "setLevel $val"
    
    if (val < 1) val = 1
    else if( val > 100) val = 100
    
    on()
    sendEvent(name: "level", value: val)
}

def configure() {
	log.debug "binding to on/off cluster"
	"zdo bind 0x${device.deviceNetworkId} 1 1 0x0006 {${device.zigbeeId}} {}"
    
	log.debug "binding to level cluster"
	"zdo bind 0x${device.deviceNetworkId} 1 1 0x0008 {${device.zigbeeId}} {}"
    
	log.debug  "set up reporting on: on/off and level"
	zigbee.configureReporting(0x0006, 0x0000, 0x10, 0, 0, null) +
	zigbee.configureReporting(0x0008, 0x0000, 0x20, 0, 0, 0x0001)
    
    sendEvent(name: "switch", value: "on")
    sendEvent(name: "level", value: 100)
}
