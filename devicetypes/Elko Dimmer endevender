/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */

metadata {
    definition (name: "Elko Dimmer-Endevender", namespace: "nilskaa@gmail.com", author: "Nils-Martin Skaanes") {
        capability "Actuator"
        capability "Button"
        capability "Momentary"
        capability "Refresh"
        capability "Switch"
        capability "Switch Level"
        capability "Light"
        
        attribute "buttonStatus", "enum", ["pushed", "held", "released"]

        //Raw code from elko dimmer-endevender: 01 0104 0104 00 02 0000 0003 03 0003 0006 0008
        fingerprint profileId: "0104", inClusters: "0000, 0003", outClusters: "0003, 0006, 0008"
    }

    tiles(scale: 2) {
        multiAttributeTile(name:"buttonStatus", type: "lighting", width: 6, height: 4, canChangeIcon: true){
            tileAttribute ("device.buttonStatus", key: "PRIMARY_CONTROL") {
                attributeState("default", label:'Pushed', backgroundColor:"#00a0dc", icon:"st.switches.light.on")
				attributeState("pushed", label:'Pushed', backgroundColor:"#00a0dc", icon:"st.switches.light.on")
				attributeState("held", label:'Held', backgroundColor:"#00a0dc", icon:"st.switches.light.on")
				attributeState("released", label:'Released', action: "momentary.push", backgroundColor:"#ffffff", icon:"st.switches.light.off")
            }
            tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action:"switch level.setLevel"
            }
        }
        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
        }
        
        main "switch"
        details(["buttonStatus", "refresh"])
    }
}

//adds functionality to press the centre tile as a virtualApp Button
def push() {
	displayInfoLog(": Virtual App Button Pressed")
	sendEvent(name: "button", value: "pushed", data: [buttonNumber: 1], descriptionText: "$device.displayName app button was pushed", isStateChange: true)
	runIn(1, clearButtonStatus)
}

// Parse incoming device messages to generate events
def parse(String description) {
    log.debug "description is $description"
    List result = []
	def descMap = zigbee.parseDescriptionAsMap(description)
	log.debug "Desc Map: $descMap"
	List attrData = [[cluster: descMap.cluster ,attrId: descMap.attrId, value: descMap.value]]
	descMap.additionalAttrs.each {
	    attrData << [cluster: descMap.cluster, attrId: it.attrId, value: it.value]
	}
	attrData.each {
      	//test if clusters, attributes and values are identified:
      	log.debug "Cluster=" + it.cluster + " Attribute=" + it.attrId + " Value=" + it.value	
	}
	return result
    
    /* unable to get events: (this is not working)
    def event = zigbee.getEvent(description)
    if (event) {
    	log.debug "event name= " + event.name + "  event value= " + event.value
        if (event.name=="level" && event.value==0) {}
        else {
            sendEvent(event)
        }
    }*/
}

def setLevel(value) {
    //zigbee.setLevel(value)
    //replace with adjusting a variable between 0-100%
    //maybe create, maintain and report state.level
}

def refresh() {
    //zigbee.onOffRefresh() + zigbee.levelRefresh()
    //testing:
    log.debug "Refresh pushed"
}

def clearButtonStatus() {
	sendEvent(name: "buttonStatus", value: "released", isStateChange: true, displayed: false)	
}
