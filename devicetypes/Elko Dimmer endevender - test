/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */

metadata {
    definition (name: "Elko Dimmer-Endevender", namespace: "nilskaa@gmail.com", author: "Nils-Martin Skaanes") {
        capability "Actuator"
        capability "Button"
        capability "Momentary"
        capability "Refresh"
        capability "Switch Level"
        capability "Light" 
        capability "Switch"
        capability "Configuration"
        
        attribute "buttonStatus", "enum", ["pushed", "released"]
 
        //Raw code from elko dimmer-endevender: 01 0104 0104 00 02 0000 0003 03 0003 0006 0008
        fingerprint profileId: "0104", inClusters: "0000, 0003", outClusters: "0003, 0006, 0008"
	}

    tiles(scale: 2) {
        multiAttributeTile(name:"buttonStatus", type: "lighting", width: 6, height: 4, canChangeIcon: true){
            tileAttribute ("device.buttonStatus", key: "PRIMARY_CONTROL") {
                attributeState("default", label:'Released', backgroundColor:"#ffffff", icon:"st.switches.light.off")
				attributeState("pushed", label:'Pushed', backgroundColor:"#00a0dc", icon:"st.switches.light.on")
				attributeState("released", label:'Released', action: "momentary.push", backgroundColor:"#ffffff", icon:"st.switches.light.off")
            }
            tileAttribute ("device.level", key: "SLIDER_CONTROL") {
                attributeState "level", action:"switch level.setLevel"
            }
        }
        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
        }
        standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "configure", label:'', action:"configuration.configure", icon:"st.secondary.configure"
	}
        main "switch"
        details(["buttonStatus", "refresh", "configure"])
    }
}

//adds functionality to press the centre tile as a virtualApp Button
def push() {
	displayInfoLog(": Virtual App Button Pressed")
	sendEvent(name: "button", value: "pushed", data: [buttonNumber: 1], descriptionText: "$device.displayName app button was pushed", isStateChange: true)
	runIn(1, clearButtonStatus)
}

// Parse incoming device messages to generate events
def parse(String description) {
    log.debug "description is $description"
	def descMap = zigbee.parseDescriptionAsMap(description)
	def cluster_id = descMap.clusterId   
    
    
    // on/off button was pressed:
    if(cluster_id=="0006"){
      sendEvent(name: "button", value: "pushed", data: [buttonNumber: 1], descriptionText: "$device.displayName app button was pushed", isStateChange: true)
      runIn(1, clearButtonStatus)
    }
    
    //dimmer was adjusted up/down
    if(cluster_id=="0008"){
      def data=descMap.data[0]
      log.debug "DIMMER=" + data
      //log.debug "dim levl=" + dimlevel
      if(state.dimlevel == null) state.dimlevel = 50
      if(state.dimlevel > 100) state.dimlevel = 50
      if(state.dimlevel < 0) state.dimlevel = 50
      if(data=="00") {
        log.debug "dimmer level increase"
        if (state.dimlevel < 100){
          state.dimlevel = state.dimlevel + 10
        }
      }
      else if (data=="01") {
        log.debug "dimmer level decrease"
        if (state.dimlevel > 0){
          state.dimlevel = state.dimlevel - 10
        }
      }
      sendEvent(name: "level", value: state.dimlevel)
    }
    
   return result 
}

def setLevel(value) {
    zigbee.setLevel(value)
    //replace with adjusting a variable between 0-100%
    //maybe create, maintain and report state.level
    //report dimer values as button pushed up/down
}

def refresh() {
    log.debug "Refresh pushed"      
}

def configure() {  
    log.debug "binding to on/off cluster"
	[
	 "zdo bind 0x${device.deviceNetworkId} 1 1 0x006 {${device.zigbeeId}} {}"
	]
    
	log.debug "binding to level cluster"
	[
	 "zdo bind 0x${device.deviceNetworkId} 1 1 0x008 {${device.zigbeeId}} {}"
	]
    
	log.debug  "set up reporting on: on/off and level"
	[
	 zigbee.configureReporting(0x006, 0x0000, 0x10, 0, 3600, null) +
	 zigbee.configureReporting(0x008, 0x0000, 0x20, 0, 3600, 0x0001)  
	] 
}

def clearButtonStatus() {
	sendEvent(name: "buttonStatus", value: "released", isStateChange: true, displayed: false)	
}
